XOSC

Connect different OSC capable programs, considering the situation where you have two programs talking via OSC, but then want to have a third or fourth application, also using OSC from those same applications, without having to rewrite code.

Solution:
Just change the target host/port to send OSC to, to XOSC, and XOSC will allow you to patch OSC between applications.

- XOSC does not require any changes to original software to use it

- XOSC has an OSC interface to create connections.

- XOSCope - provides a user interface for showing and creating connections.

- (intra-XOSC) Several instances of XOSC can communicate with each other to create connections between them.

- (net-XOSC) Something like OSC-Groups will allow for communication over the net.

COMPONENTS:
- XOsc    - server application which takes care of connections - controlled by osc
- libxosc - provides additional functionality to subscribe and manage connections

IMPLEMENTATION AND INTERFACE

* generic OSC handler 
  which listens to incoming OSC messages, and stores the address-tags, with info from where they came (host+port), and what type tags they have. Either of these characteristics can change per address-tag.
  
"/play/song" 1 8.0


* OSC interface:

/XOSC/register/client - provide a name for host/port combination - for labeling in interface (confirm w/ bool)

/XOSC/unregister/client - release a name for host/port combination - for labeling in interface (confirm w/ bool)

/XOSC/register/host - provide a name for host/port combination - for labeling in interface (confirm w/ bool)

/XOSC/unregister/host - release a name for host/port combination - for labeling in interface (confirm w/ bool)

/XOSC/register/watch - register to be informed about connections and tags (args: port to send messages to) (confirm w/ bool)

/XOSC/unregister/watch - unregister to be informed about connections and tags (args: port to send messages to) (confirm w/ bool)


/XOSC/query/tags - query the available tags (args: port to send data back to)

/XOSC/query/connections - query the set connections (args: port to send data back to)

/XOSC/query/tag/connections - query connections for specific tag (args: port to send data back to, tag to query)

/XOSC/info/tag - tagname, sender ip, sender port, sender name (if any)
/XOSC/info/tag/connection - tagname, receiver ip, receiver port, receiver name (if any)
/XOSC/info/connection - tagname, sender ip, port, name (if any), receiver ip, receiver port, receiver name (if any)


/XOSC/subscribe/tag - make a connection to yourself for specific tag (args: port to send messages to, tag to connect) (confirm w/ bool)
/XOSC/subscribe/host - make a connection to yourself for messages from specific host (args: port to send messages to, host ip, port to connec to) (confirm w/ bool)
/XOSC/unsubscribe/tag - break a connection to yourself for specific tag (args: port to send messages to, tag to connect) (confirm w/ bool)
/XOSC/unsubscribe/host - break a connection to yourself for messages from specific host (args: port to send messages to, host ip, port to connec to) (confirm w/ bool)

/XOSC/connect/tag - make a connection for specific tag and host/port (args: tag, target host, target port) (confirm w/ bool)
/XOSC/connect/host - make a connection for specific sender and host/port (args: source host, source port, target host, target port) (confirm w/ bool)
/XOSC/disconnect/tag - break a connection for specific tag and host/port (args: tag, target host, target port) (confirm w/ bool)
/XOSC/disconnect/host - break a connection for specific sender and host/port (args: source host, source port, target host, target port) (confirm w/ bool)

------- advanced -------
* tag renaming/filtering/mapping (a la libmapper - see how far this needs to go)
    */tag/retag  - make/break connection for specific tag, and rename it.(+ args: new tagname
    */tag/filter - make/break connection for specific tag, and filter arguments (add. args: ids for slots of original data)
    */tag/retag/filter - make/break connection for specific tag, and rename it, and filter arguments (add. args: new tagname, ids for slots)
    */tag/map    - make/break connection and rescale data
    */tag/retag/map
    */tag/filter/map
    */tag/retag/filter/map
------- advanced -------
    
* connections:
- register an OSC handler, which will forward the message to the indicated host/port
- and be able to remove it again when a connection is broken
